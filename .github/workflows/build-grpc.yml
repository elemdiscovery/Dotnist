name: Build and Push gRPC Image

on:
  push:
    branches: [ main ]

env:
  REGISTRY_IMAGE: ghcr.io/elemdiscovery/dotnist-grpc

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersion to work properly
      
    - name: Disable man-db to make package install and removal faster
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
        sudo dpkg-reconfigure man-db
        
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true # we get this in Docker
        haskell: true
        large-packages: false # this is slow apparently
        docker-images: false
        swap-storage: true # this will cause issues if we use a lot of memory
      
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.11
      with:
        versionSpec: '6.0.x'
      
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v3.1.11
      with:
        configFilePath: GitVersion.yml
        
    - name: Prepare
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ matrix.platform }}
        tags: ${{ env.REGISTRY_IMAGE }}
        build-args: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          ASSEMBLY_VERSION=${{ steps.gitversion.outputs.assemblySemVer }}
          FILE_VERSION=${{ steps.gitversion.outputs.assemblySemFileVer }}
          INFORMATIONAL_VERSION=${{ steps.gitversion.outputs.informationalVersion }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      run: |
        # Create manifest for latest tag
        docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:latest \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
        
        # Create manifest for version tag
        docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ needs.build.outputs.version }} \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest 